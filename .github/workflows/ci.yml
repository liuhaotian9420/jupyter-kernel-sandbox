name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.10"
  NODE_VERSION: "18"

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety mypy
          pip install -e .
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: Run Black (code formatting check)
        run: black --check --diff src/ tests/ examples/

      - name: Run isort (import sorting check)
        run: isort --check-only --diff src/ tests/ examples/

      - name: Run Flake8 (linting)
        run: flake8 src/ tests/ examples/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run Bandit (security scan)
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Safety (dependency vulnerability scan)
        run: safety check --json --output safety-report.json || true

      - name: Run MyPy (type checking)
        run: mypy src/ --ignore-missing-imports || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          pip install -e .[all]
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
        shell: bash

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src/jupyter_kernel_client --cov-report=xml --cov-report=html --cov-report=term
        shell: bash

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: |
          docker build -t mini-jupyter-sandbox:test .
          docker images

      - name: Test Docker image
        run: |
          # Basic container health check
          docker run --rm mini-jupyter-sandbox:test python -c "import jupyter_kernel_client; print('Package imports successfully')"
          
      - name: Run Docker Compose validation
        run: |
          docker-compose config
          
  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all]
          pip install pytest requests

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to be ready

      - name: Wait for services to be healthy
        run: |
          # Wait for Enterprise Gateway
          timeout 120 bash -c 'until curl -f http://localhost:8889/api/kernelspecs; do sleep 5; done'
          # Wait for file server
          timeout 60 bash -c 'until curl -f http://localhost:8080/list; do sleep 5; done'

      - name: Run integration tests
        run: |
          pytest tests/ -v -m integration --tb=short
        continue-on-error: true

      - name: Collect service logs
        if: always()
        run: |
          mkdir -p logs
          docker-compose logs > logs/docker-compose.log
          docker logs enterprise-gateway > logs/enterprise-gateway.log 2>&1 || true
          docker logs jupyter-notebook > logs/jupyter-notebook.log 2>&1 || true
          docker logs file-server > logs/file-server.log 2>&1 || true

      - name: Upload service logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: service-logs
          path: logs/

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f

  # Package Build and Upload
  package:
    name: Build & Upload Package
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload to PyPI
        if: github.event_name == 'release'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

  # Docker Image Publishing
  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment (if needed)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [publish-docker]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deploy to staging environment"
          # Add your deployment scripts here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d
